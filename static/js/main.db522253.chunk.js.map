{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","src","alt","style","margin","fontSize","CardList","robots","cardArray","map","user","index","SearchBox","searchChange","onChange","placeholder","type","padding","width","Scroll","props","overflow","border","height","children","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","display","flexDirection","justifyContent","alignItems","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"kRAceA,EAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,oBAAIC,MAAO,CAAEC,OAAQ,oBAArB,SAA4CP,IAC5C,mBAAGM,MAAO,CAAEE,SAAU,OAAtB,SAAgCP,QCY7BQ,G,MAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,cAAC,EAAD,CAEIZ,GAAIQ,EAAOI,GAAOZ,GAClBF,KAAMU,EAAOI,GAAOd,KACpBC,MAAOS,EAAOI,GAAOb,OAHhBS,EAAOI,GAAOZ,OAO/B,OACI,qBAAKC,UAAU,WAAf,SACKQ,MCNEI,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,uBAAOC,SAAUD,EACbE,YAAY,gBACZC,KAAK,SACLb,MAAO,CAAEc,QAAS,MAAOb,OAAQ,OAAQC,SAAU,OAAQa,MAAO,YCE/DC,EAPA,SAACC,GACZ,OACI,qBAAKjB,MAAO,CAAEkB,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKH,EAAMI,YC2CJC,MA3Cf,WACI,MAA4BC,mBAAS,IAArC,mBAAOnB,EAAP,KAAeoB,EAAf,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAGAC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAWR,EAAUQ,QAChC,IAOH,IAIMC,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASZ,EAAYW,kBAGzD,OACKhC,EAAOkC,OAIA,sBAAKtC,MAAO,CAAEuC,QAAS,OAAQC,cAAe,SAAUC,eAAgB,SAAUC,WAAY,UAA9F,UACI,sBAAK1C,MAAO,CAAEwC,cAAe,UAA7B,UACI,6CAEA,cAAC,EAAD,CAAW9B,aAjBR,SAACiC,GACpBjB,EAAeiB,EAAMC,OAAOC,aAkBhB,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzC,OAAQ6B,SAT9B,6C,MCxBZa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.db522253.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.css\";\r\n\r\nconst Card = ({ name, email, id }) => {//puvodne bylo v zavorce props a nize const { name, email, id }; jde to ale takto jeste lip\r\n    //const { name, email, id } = props;//pokud toto nedam, tak u promennych bych musel psat props.name, props.id ...\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <h3 style={{ margin: \"20px 0px 2px 0px\" }}>{name}</h3>\r\n            <p style={{ fontSize: \"90%\" }}>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\"\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, index) => {\r\n        return (\r\n            <Card\r\n                key={robots[index].id}\r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <div className=\"cardList\">\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <input onChange={searchChange}\r\n            placeholder=\"search robots\"\r\n            type=\"search\"\r\n            style={{ padding: \"5px\", margin: \"20px\", fontSize: \"15px\", width: \"200px\" }}\r\n        />\r\n    );\r\n}\r\nexport default SearchBox;","import React from \"react\";\r\n//toto je dulezity koncept Reactu - vedle STATE a PROPS jeste CHILDREN\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '2px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","import React, { useState, useEffect } from \"react\";\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from '../components/Scroll';\r\n\r\nfunction App() {\r\n    const [robots, setRobots] = useState([]);\r\n    const [searchfield, setSearchfield] = useState('');\r\n    // const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => { setRobots(users) });\r\n    }, [])//tady musim dat druhy parametr - prazdne pole - protoze useEffect se spousti kazdym renderem \r\n    //a tak by se to spoustelo stale dokola; nepomohlo by ani kdybych misto [] dal robots, nebo searchfield\r\n    //jinymi slovy rika, ze to [] je shortcut pro componentDidMount\r\n    //druhy parametr by mel specifikovat, na cem bude spusteni useEffektu zaviset - napr. dam tlacitko \r\n    //s onClick nekde dolu do DOM a novou state promennou count, setCount a nasledne do useEffect jako druhy\r\n    //param [count] - toto by zpusobilo, ze fetch probehne vzdy az po stisku tlacitka  \r\n\r\n    const onSearchChange = (event) => {\r\n        setSearchfield(event.target.value);\r\n\r\n    }\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n    return (\r\n        !robots.length\r\n            ?\r\n            <h1>Loading...</h1>\r\n            : (\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    <div style={{ flexDirection: \"column\" }}>\r\n                        <h1>RoboFriends</h1>\r\n                        {/* <button onCLick={() => setCount(count+1)}></button> */}\r\n                        <SearchBox searchChange={onSearchChange} />\r\n                    </div>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tachyons\";\nimport App from './containers/App';\nimport './containers/app.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}